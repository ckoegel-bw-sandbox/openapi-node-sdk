/**
 * FrankenSpec
 * Bandwidth's Frankensteined API Spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeSdk);
  }
}(this, function(expect, NodeSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeSdk.BandwidthMessageItem();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BandwidthMessageItem', function() {
    it('should create an instance of BandwidthMessageItem', function() {
      // uncomment below and update the code to test BandwidthMessageItem
      //var instane = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be.a(NodeSdk.BandwidthMessageItem);
    });

    it('should have the property messageId (base name: "messageId")', function() {
      // uncomment below and update the code to test the property messageId
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property sourceTn (base name: "sourceTn")', function() {
      // uncomment below and update the code to test the property sourceTn
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property destinationTn (base name: "destinationTn")', function() {
      // uncomment below and update the code to test the property destinationTn
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property messageStatus (base name: "messageStatus")', function() {
      // uncomment below and update the code to test the property messageStatus
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property messageDirection (base name: "messageDirection")', function() {
      // uncomment below and update the code to test the property messageDirection
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property messageType (base name: "messageType")', function() {
      // uncomment below and update the code to test the property messageType
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property segmentCount (base name: "segmentCount")', function() {
      // uncomment below and update the code to test the property segmentCount
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property errorCode (base name: "errorCode")', function() {
      // uncomment below and update the code to test the property errorCode
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property receiveTime (base name: "receiveTime")', function() {
      // uncomment below and update the code to test the property receiveTime
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property carrierName (base name: "carrierName")', function() {
      // uncomment below and update the code to test the property carrierName
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property messageSize (base name: "messageSize")', function() {
      // uncomment below and update the code to test the property messageSize
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property messageLength (base name: "messageLength")', function() {
      // uncomment below and update the code to test the property messageLength
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property attachmentCount (base name: "attachmentCount")', function() {
      // uncomment below and update the code to test the property attachmentCount
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property recipientCount (base name: "recipientCount")', function() {
      // uncomment below and update the code to test the property recipientCount
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

    it('should have the property campaignClass (base name: "campaignClass")', function() {
      // uncomment below and update the code to test the property campaignClass
      //var instance = new NodeSdk.BandwidthMessageItem();
      //expect(instance).to.be();
    });

  });

}));
