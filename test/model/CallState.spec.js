/**
 * FrankenSpec
 * Bandwidth's Frankensteined API Spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeSdk);
  }
}(this, function(expect, NodeSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeSdk.CallState();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CallState', function() {
    it('should create an instance of CallState', function() {
      // uncomment below and update the code to test CallState
      //var instane = new NodeSdk.CallState();
      //expect(instance).to.be.a(NodeSdk.CallState);
    });

    it('should have the property callId (base name: "callId")', function() {
      // uncomment below and update the code to test the property callId
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property parentCallId (base name: "parentCallId")', function() {
      // uncomment below and update the code to test the property parentCallId
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property applicationId (base name: "applicationId")', function() {
      // uncomment below and update the code to test the property applicationId
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property to (base name: "to")', function() {
      // uncomment below and update the code to test the property to
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property from (base name: "from")', function() {
      // uncomment below and update the code to test the property from
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property direction (base name: "direction")', function() {
      // uncomment below and update the code to test the property direction
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property identity (base name: "identity")', function() {
      // uncomment below and update the code to test the property identity
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property stirShaken (base name: "stirShaken")', function() {
      // uncomment below and update the code to test the property stirShaken
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property answerTime (base name: "answerTime")', function() {
      // uncomment below and update the code to test the property answerTime
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property disconnectCause (base name: "disconnectCause")', function() {
      // uncomment below and update the code to test the property disconnectCause
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "errorMessage")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property errorId (base name: "errorId")', function() {
      // uncomment below and update the code to test the property errorId
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdate (base name: "lastUpdate")', function() {
      // uncomment below and update the code to test the property lastUpdate
      //var instance = new NodeSdk.CallState();
      //expect(instance).to.be();
    });

  });

}));
