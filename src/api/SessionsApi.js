/**
 * FrankenSpec
 * Bandwidth's Frankensteined API Spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Participant from '../model/Participant';
import Session from '../model/Session';
import Subscriptions from '../model/Subscriptions';

/**
* Sessions service.
* @module api/SessionsApi
* @version 1.0.0
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addParticipantToSession operation.
     * @callback module:api/SessionsApi~addParticipantToSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Participant
     * Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
     * @param {String} accountId Account ID
     * @param {String} sessionId Session ID
     * @param {String} participantId Participant ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Subscriptions} opts.subscriptions Subscriptions the participant should be created with
     * @param {module:api/SessionsApi~addParticipantToSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addParticipantToSession(accountId, sessionId, participantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptions'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling addParticipantToSession");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling addParticipantToSession");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling addParticipantToSession");
      }

      let pathParams = {
        'accountId': accountId,
        'sessionId': sessionId,
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      let basePaths = ['https://api.webrtc.bandwidth.com/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the createSession operation.
     * @callback module:api/SessionsApi~createSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Session
     * Create a new session.  Sessions are idempotent, so relevant parameters must be set in this function if desired. 
     * @param {String} accountId Account ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Session} opts.session Session parameters
     * @param {module:api/SessionsApi~createSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    createSession(accountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['session'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createSession");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Session;
      let basePaths = ['https://api.webrtc.bandwidth.com/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSession operation.
     * @callback module:api/SessionsApi~deleteSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Session
     * Delete session by ID.
     * @param {String} accountId Account ID
     * @param {String} sessionId Session ID
     * @param {module:api/SessionsApi~deleteSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSession(accountId, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteSession");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling deleteSession");
      }

      let pathParams = {
        'accountId': accountId,
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      let basePaths = ['https://api.webrtc.bandwidth.com/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/sessions/{sessionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the getParticipantSubscriptions operation.
     * @callback module:api/SessionsApi~getParticipantSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscriptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Participant Subscriptions
     * Get a participant's subscriptions.
     * @param {String} accountId Account ID
     * @param {String} sessionId Session ID
     * @param {String} participantId Participant ID
     * @param {module:api/SessionsApi~getParticipantSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscriptions}
     */
    getParticipantSubscriptions(accountId, sessionId, participantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getParticipantSubscriptions");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getParticipantSubscriptions");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling getParticipantSubscriptions");
      }

      let pathParams = {
        'accountId': accountId,
        'sessionId': sessionId,
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subscriptions;
      let basePaths = ['https://api.webrtc.bandwidth.com/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the getSession operation.
     * @callback module:api/SessionsApi~getSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Session
     * Get session by ID.
     * @param {String} accountId Account ID
     * @param {String} sessionId Session ID
     * @param {module:api/SessionsApi~getSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    getSession(accountId, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getSession");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getSession");
      }

      let pathParams = {
        'accountId': accountId,
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Session;
      let basePaths = ['https://api.webrtc.bandwidth.com/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/sessions/{sessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSessionParticipants operation.
     * @callback module:api/SessionsApi~listSessionParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Participant>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Participants
     * List participants in a session.
     * @param {String} accountId Account ID
     * @param {String} sessionId Session ID
     * @param {module:api/SessionsApi~listSessionParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Participant>}
     */
    listSessionParticipants(accountId, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listSessionParticipants");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling listSessionParticipants");
      }

      let pathParams = {
        'accountId': accountId,
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Participant];
      let basePaths = ['https://api.webrtc.bandwidth.com/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/sessions/{sessionId}/participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the removeParticipantFromSession operation.
     * @callback module:api/SessionsApi~removeParticipantFromSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Participant
     * Remove a participant from a session.  This will automatically remove any subscriptions the participant has associated with this session. 
     * @param {String} accountId Account ID
     * @param {String} sessionId Session ID
     * @param {String} participantId Participant ID
     * @param {module:api/SessionsApi~removeParticipantFromSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeParticipantFromSession(accountId, sessionId, participantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling removeParticipantFromSession");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling removeParticipantFromSession");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling removeParticipantFromSession");
      }

      let pathParams = {
        'accountId': accountId,
        'sessionId': sessionId,
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      let basePaths = ['https://api.webrtc.bandwidth.com/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParticipantSubscriptions operation.
     * @callback module:api/SessionsApi~updateParticipantSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Participant Subscriptions
     * Update a participant's subscriptions.  This is a full update that will replace the participant's subscriptions. First call `getParticipantSubscriptions` if you need the current subscriptions. Call this function with no `Subscriptions` object to remove all subscriptions. 
     * @param {String} accountId Account ID
     * @param {String} sessionId Session ID
     * @param {String} participantId Participant ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Subscriptions} opts.subscriptions Initial state
     * @param {module:api/SessionsApi~updateParticipantSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateParticipantSubscriptions(accountId, sessionId, participantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptions'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateParticipantSubscriptions");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling updateParticipantSubscriptions");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling updateParticipantSubscriptions");
      }

      let pathParams = {
        'accountId': accountId,
        'sessionId': sessionId,
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      let basePaths = ['https://api.webrtc.bandwidth.com/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
