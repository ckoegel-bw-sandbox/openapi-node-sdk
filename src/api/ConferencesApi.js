/**
 * FrankenSpec
 * Bandwidth's Frankensteined API Spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import CallRecordingMetadata from '../model/CallRecordingMetadata';
import ConferenceMemberState from '../model/ConferenceMemberState';
import ConferenceRecordingMetadata from '../model/ConferenceRecordingMetadata';
import ConferenceState from '../model/ConferenceState';
import ModifyConferenceRequest from '../model/ModifyConferenceRequest';

/**
* Conferences service.
* @module api/ConferencesApi
* @version 1.0.0
*/
export default class ConferencesApi {

    /**
    * Constructs a new ConferencesApi. 
    * @alias module:api/ConferencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the downloadConferenceRecording operation.
     * @callback module:api/ConferencesApi~downloadConferenceRecordingCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Recording
     * Downloads the specified recording.
     * @param {String} accountId 
     * @param {String} conferenceId 
     * @param {String} recordingId 
     * @param {module:api/ConferencesApi~downloadConferenceRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadConferenceRecording(accountId, conferenceId, recordingId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling downloadConferenceRecording");
      }
      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling downloadConferenceRecording");
      }
      // verify the required parameter 'recordingId' is set
      if (recordingId === undefined || recordingId === null) {
        throw new Error("Missing the required parameter 'recordingId' when calling downloadConferenceRecording");
      }

      let pathParams = {
        'accountId': accountId,
        'conferenceId': conferenceId,
        'recordingId': recordingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['audio/vnd.wave', 'audio/mpeg', 'application/json'];
      let returnType = File;
      let basePaths = ['https://voice.bandwidth.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the getConference operation.
     * @callback module:api/ConferencesApi~getConferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Conference Information
     * Returns information about the specified conference.
     * @param {String} accountId 
     * @param {String} conferenceId 
     * @param {module:api/ConferencesApi~getConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceState}
     */
    getConference(accountId, conferenceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getConference");
      }
      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling getConference");
      }

      let pathParams = {
        'accountId': accountId,
        'conferenceId': conferenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConferenceState;
      let basePaths = ['https://voice.bandwidth.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/accounts/{accountId}/conferences/{conferenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the getConferenceMember operation.
     * @callback module:api/ConferencesApi~getConferenceMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceMemberState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Member Information
     * Returns information about the specified conference member.
     * @param {String} accountId 
     * @param {String} conferenceId 
     * @param {String} memberId 
     * @param {module:api/ConferencesApi~getConferenceMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceMemberState}
     */
    getConferenceMember(accountId, conferenceId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getConferenceMember");
      }
      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling getConferenceMember");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling getConferenceMember");
      }

      let pathParams = {
        'accountId': accountId,
        'conferenceId': conferenceId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConferenceMemberState;
      let basePaths = ['https://voice.bandwidth.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the getConferenceRecording operation.
     * @callback module:api/ConferencesApi~getConferenceRecordingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallRecordingMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recording Information
     * Returns metadata for the specified recording.
     * @param {String} accountId 
     * @param {String} conferenceId 
     * @param {String} recordingId 
     * @param {module:api/ConferencesApi~getConferenceRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallRecordingMetadata}
     */
    getConferenceRecording(accountId, conferenceId, recordingId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getConferenceRecording");
      }
      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling getConferenceRecording");
      }
      // verify the required parameter 'recordingId' is set
      if (recordingId === undefined || recordingId === null) {
        throw new Error("Missing the required parameter 'recordingId' when calling getConferenceRecording");
      }

      let pathParams = {
        'accountId': accountId,
        'conferenceId': conferenceId,
        'recordingId': recordingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CallRecordingMetadata;
      let basePaths = ['https://voice.bandwidth.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the getConferenceRecordings operation.
     * @callback module:api/ConferencesApi~getConferenceRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConferenceRecordingMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Conference Recordings
     * Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference
     * @param {String} accountId 
     * @param {String} conferenceId 
     * @param {module:api/ConferencesApi~getConferenceRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConferenceRecordingMetadata>}
     */
    getConferenceRecordings(accountId, conferenceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getConferenceRecordings");
      }
      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling getConferenceRecordings");
      }

      let pathParams = {
        'accountId': accountId,
        'conferenceId': conferenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConferenceRecordingMetadata];
      let basePaths = ['https://voice.bandwidth.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the getConferences operation.
     * @callback module:api/ConferencesApi~getConferencesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConferenceState>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Conferences
     * Returns information about the conferences in the account.
     * @param {String} accountId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.minCreatedTime 
     * @param {String} opts.maxCreatedTime 
     * @param {Number} opts.pageSize  (default to 1000)
     * @param {String} opts.pageToken 
     * @param {module:api/ConferencesApi~getConferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConferenceState>}
     */
    getConferences(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getConferences");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'name': opts['name'],
        'minCreatedTime': opts['minCreatedTime'],
        'maxCreatedTime': opts['maxCreatedTime'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConferenceState];
      let basePaths = ['https://voice.bandwidth.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/accounts/{accountId}/conferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyConference operation.
     * @callback module:api/ConferencesApi~modifyConferenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Conference
     * Modify the conference state.
     * @param {String} accountId 
     * @param {String} conferenceId 
     * @param {module:model/ModifyConferenceRequest} modifyConferenceRequest 
     * @param {module:api/ConferencesApi~modifyConferenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modifyConference(accountId, conferenceId, modifyConferenceRequest, opts, callback) {
      opts = opts || {};
      let postBody = modifyConferenceRequest;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling modifyConference");
      }
      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling modifyConference");
      }
      // verify the required parameter 'modifyConferenceRequest' is set
      if (modifyConferenceRequest === undefined || modifyConferenceRequest === null) {
        throw new Error("Missing the required parameter 'modifyConferenceRequest' when calling modifyConference");
      }

      let pathParams = {
        'accountId': accountId,
        'conferenceId': conferenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      let basePaths = ['https://voice.bandwidth.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/accounts/{accountId}/conferences/{conferenceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyConferenceMember operation.
     * @callback module:api/ConferencesApi~modifyConferenceMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Member
     * Updates settings for a particular conference member.
     * @param {String} accountId 
     * @param {String} conferenceId 
     * @param {String} callId 
     * @param {module:model/ConferenceMemberState} conferenceMemberState 
     * @param {module:api/ConferencesApi~modifyConferenceMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modifyConferenceMember(accountId, conferenceId, callId, conferenceMemberState, opts, callback) {
      opts = opts || {};
      let postBody = conferenceMemberState;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling modifyConferenceMember");
      }
      // verify the required parameter 'conferenceId' is set
      if (conferenceId === undefined || conferenceId === null) {
        throw new Error("Missing the required parameter 'conferenceId' when calling modifyConferenceMember");
      }
      // verify the required parameter 'callId' is set
      if (callId === undefined || callId === null) {
        throw new Error("Missing the required parameter 'callId' when calling modifyConferenceMember");
      }
      // verify the required parameter 'conferenceMemberState' is set
      if (conferenceMemberState === undefined || conferenceMemberState === null) {
        throw new Error("Missing the required parameter 'conferenceMemberState' when calling modifyConferenceMember");
      }

      let pathParams = {
        'accountId': accountId,
        'conferenceId': conferenceId,
        'callId': callId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      let basePaths = ['https://voice.bandwidth.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{callId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
