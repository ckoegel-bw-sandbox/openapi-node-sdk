/**
 * FrankenSpec
 * Bandwidth's Frankensteined API Spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorWithRequest from '../model/ErrorWithRequest';
import ForbiddenRequest from '../model/ForbiddenRequest';
import TwoFactorCodeRequestSchema from '../model/TwoFactorCodeRequestSchema';
import TwoFactorMessagingResponse from '../model/TwoFactorMessagingResponse';
import TwoFactorVerifyCodeResponse from '../model/TwoFactorVerifyCodeResponse';
import TwoFactorVerifyRequestSchema from '../model/TwoFactorVerifyRequestSchema';
import TwoFactorVoiceResponse from '../model/TwoFactorVoiceResponse';
import UnauthorizedRequest from '../model/UnauthorizedRequest';

/**
* MFA service.
* @module api/MFAApi
* @version 1.0.0
*/
export default class MFAApi {

    /**
    * Constructs a new MFAApi. 
    * @alias module:api/MFAApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the messagingTwoFactor operation.
     * @callback module:api/MFAApi~messagingTwoFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorMessagingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Messaging Authentication
     * Multi-Factor authentication with Bandwidth Messaging services. Allows a user to send an MFA code via a text message (SMS).
     * @param {String} accountId Bandwidth Account ID with Messaging service enabled
     * @param {module:model/TwoFactorCodeRequestSchema} twoFactorCodeRequestSchema 
     * @param {module:api/MFAApi~messagingTwoFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorMessagingResponse}
     */
    messagingTwoFactor(accountId, twoFactorCodeRequestSchema, opts, callback) {
      opts = opts || {};
      let postBody = twoFactorCodeRequestSchema;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling messagingTwoFactor");
      }
      // verify the required parameter 'twoFactorCodeRequestSchema' is set
      if (twoFactorCodeRequestSchema === undefined || twoFactorCodeRequestSchema === null) {
        throw new Error("Missing the required parameter 'twoFactorCodeRequestSchema' when calling messagingTwoFactor");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TwoFactorMessagingResponse;
      let basePaths = ['https://mfa.bandwidth.com/api/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/code/messaging', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyTwoFactor operation.
     * @callback module:api/MFAApi~verifyTwoFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorVerifyCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Authentication Code
     * Allows a user to verify an MFA code.
     * @param {String} accountId Bandwidth Account ID with Two-Factor enabled
     * @param {module:model/TwoFactorVerifyRequestSchema} twoFactorVerifyRequestSchema 
     * @param {module:api/MFAApi~verifyTwoFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorVerifyCodeResponse}
     */
    verifyTwoFactor(accountId, twoFactorVerifyRequestSchema, opts, callback) {
      opts = opts || {};
      let postBody = twoFactorVerifyRequestSchema;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling verifyTwoFactor");
      }
      // verify the required parameter 'twoFactorVerifyRequestSchema' is set
      if (twoFactorVerifyRequestSchema === undefined || twoFactorVerifyRequestSchema === null) {
        throw new Error("Missing the required parameter 'twoFactorVerifyRequestSchema' when calling verifyTwoFactor");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TwoFactorVerifyCodeResponse;
      let basePaths = ['https://mfa.bandwidth.com/api/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/code/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the voiceTwoFactor operation.
     * @callback module:api/MFAApi~voiceTwoFactorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TwoFactorVoiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Voice Authentication
     * Multi-Factor authentication with Bandwidth Voice services. Allows for a user to send an MFA code via a phone call.
     * @param {String} accountId Bandwidth Account ID with Voice service enabled
     * @param {module:model/TwoFactorCodeRequestSchema} twoFactorCodeRequestSchema 
     * @param {module:api/MFAApi~voiceTwoFactorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TwoFactorVoiceResponse}
     */
    voiceTwoFactor(accountId, twoFactorCodeRequestSchema, opts, callback) {
      opts = opts || {};
      let postBody = twoFactorCodeRequestSchema;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling voiceTwoFactor");
      }
      // verify the required parameter 'twoFactorCodeRequestSchema' is set
      if (twoFactorCodeRequestSchema === undefined || twoFactorCodeRequestSchema === null) {
        throw new Error("Missing the required parameter 'twoFactorCodeRequestSchema' when calling voiceTwoFactor");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TwoFactorVoiceResponse;
      let basePaths = ['https://mfa.bandwidth.com/api/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/code/voice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
