/**
 * FrankenSpec
 * Bandwidth's Frankensteined API Spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OrderRequest from '../model/OrderRequest';
import OrderResponse from '../model/OrderResponse';
import OrderStatus from '../model/OrderStatus';

/**
* PhoneNumberLookup service.
* @module api/PhoneNumberLookupApi
* @version 1.0.0
*/
export default class PhoneNumberLookupApi {

    /**
    * Constructs a new PhoneNumberLookupApi. 
    * @alias module:api/PhoneNumberLookupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the lookupRequest operation.
     * @callback module:api/PhoneNumberLookupApi~lookupRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Request
     * Create a TN Lookup Order.
     * @param {String} accountId The ID of the Bandwidth account that the user belongs to.
     * @param {module:model/OrderRequest} orderRequest 
     * @param {module:api/PhoneNumberLookupApi~lookupRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResponse}
     */
    lookupRequest(accountId, orderRequest, opts, callback) {
      opts = opts || {};
      let postBody = orderRequest;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling lookupRequest");
      }
      // verify the required parameter 'orderRequest' is set
      if (orderRequest === undefined || orderRequest === null) {
        throw new Error("Missing the required parameter 'orderRequest' when calling lookupRequest");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderResponse;
      let basePaths = ['https://numbers.bandwidth.com/api/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/tnlookup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the lookupRequestStatus operation.
     * @callback module:api/PhoneNumberLookupApi~lookupRequestStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Request Status
     * Query an existing TN Lookup Order.
     * @param {String} accountId The ID of the Bandwidth account that the user belongs to.
     * @param {String} requestId 
     * @param {module:api/PhoneNumberLookupApi~lookupRequestStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderStatus}
     */
    lookupRequestStatus(accountId, requestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling lookupRequestStatus");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling lookupRequestStatus");
      }

      let pathParams = {
        'accountId': accountId,
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['httpBasic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderStatus;
      let basePaths = ['https://numbers.bandwidth.com/api/v1'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/accounts/{accountId}/tnlookup/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
