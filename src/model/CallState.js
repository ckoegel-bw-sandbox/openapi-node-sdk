/**
 * FrankenSpec
 * Bandwidth's Frankensteined API Spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CallState model module.
 * @module model/CallState
 * @version 1.0.0
 */
class CallState {
    /**
     * Constructs a new <code>CallState</code>.
     * @alias module:model/CallState
     */
    constructor() { 
        
        CallState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallState} obj Optional instance to populate.
     * @return {module:model/CallState} The populated <code>CallState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallState();

            if (data.hasOwnProperty('callId')) {
                obj['callId'] = ApiClient.convertToType(data['callId'], 'String');
            }
            if (data.hasOwnProperty('parentCallId')) {
                obj['parentCallId'] = ApiClient.convertToType(data['parentCallId'], 'String');
            }
            if (data.hasOwnProperty('applicationId')) {
                obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('identity')) {
                obj['identity'] = ApiClient.convertToType(data['identity'], 'String');
            }
            if (data.hasOwnProperty('stirShaken')) {
                obj['stirShaken'] = ApiClient.convertToType(data['stirShaken'], {'String': 'String'});
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('answerTime')) {
                obj['answerTime'] = ApiClient.convertToType(data['answerTime'], 'Date');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('disconnectCause')) {
                obj['disconnectCause'] = ApiClient.convertToType(data['disconnectCause'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('errorId')) {
                obj['errorId'] = ApiClient.convertToType(data['errorId'], 'String');
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {String} callId
 */
CallState.prototype['callId'] = undefined;

/**
 * @member {String} parentCallId
 */
CallState.prototype['parentCallId'] = undefined;

/**
 * @member {String} applicationId
 */
CallState.prototype['applicationId'] = undefined;

/**
 * @member {String} accountId
 */
CallState.prototype['accountId'] = undefined;

/**
 * @member {String} to
 */
CallState.prototype['to'] = undefined;

/**
 * @member {String} from
 */
CallState.prototype['from'] = undefined;

/**
 * @member {String} direction
 */
CallState.prototype['direction'] = undefined;

/**
 * The current state of the call. Current possible values are 'initiated', 'answered' and 'disconnected'. Additional states may be added in the future, so your application must be tolerant of unknown values.
 * @member {String} state
 */
CallState.prototype['state'] = undefined;

/**
 * @member {String} identity
 */
CallState.prototype['identity'] = undefined;

/**
 * @member {Object.<String, String>} stirShaken
 */
CallState.prototype['stirShaken'] = undefined;

/**
 * @member {Date} startTime
 */
CallState.prototype['startTime'] = undefined;

/**
 * @member {Date} answerTime
 */
CallState.prototype['answerTime'] = undefined;

/**
 * @member {Date} endTime
 */
CallState.prototype['endTime'] = undefined;

/**
 * The reason the call was disconnected, or null if the call is still active. Current values are 'cancel', 'timeout', 'busy', 'rejected', 'hangup', 'invalid-bxml', 'callback-error', 'application-error', 'error', 'account-limit', 'node-capacity-exceeded' and 'unknown'. Additional causes may be added in the future, so your application must be tolerant of unknown values.
 * @member {String} disconnectCause
 */
CallState.prototype['disconnectCause'] = undefined;

/**
 * @member {String} errorMessage
 */
CallState.prototype['errorMessage'] = undefined;

/**
 * @member {String} errorId
 */
CallState.prototype['errorId'] = undefined;

/**
 * @member {Date} lastUpdate
 */
CallState.prototype['lastUpdate'] = undefined;






export default CallState;

